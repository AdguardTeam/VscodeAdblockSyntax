# TMLanguage for Adblock Filter Lists
#
# This file makes possible the syntax highlighting of Adblock Filter Lists by tokenizing the rules
# and assigning a scope to each token.
#
# GitHub Linguist can use this file directly, but during the build, we convert it to a .plist file,
# so the VSCode extension can use it. Development is done in this .yaml-tmlanguage file.
#
# IMPORTANT: Colors are defined in your editor's color scheme, not here. This file only splits the
# filter list into tokens and assigns a scope to each token. After that, your editor will colorize
# the tokens according to the color scheme you have chosen. For more information, please visit:
# https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
#
# If you aren't familiar with TextMate Language Grammars, you can read the following documentations:
# - https://macromates.com/manual/en/language_grammars
# - https://www.sublimetext.com/docs/3/syntax.html
# - https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
---
name: Adblock
scopeName: text.adblock
patterns:
  - include: "#adblockAgent"
  - include: "#preprocessor"
  - include: "#comments"
  - include: "#snippetRulesABP"
  - include: "#cssRules"
  - include: "#scriptletRules"
  - include: "#scriptletRulesUBO"
  - include: "#jsRules"
  - include: "#contentRules"
  - include: "#elemhideRules"
  - include: "#basicRulesNoUrl"
  - include: "#basicRulesRegex"
  - include: "#basicRules"
repository:
  adblockAgent:
    patterns:
      - match: "^(\\[)([^\\]]+)(\\])\\s*$"
        captures:
          "1":
            name: punctuation.definition.array.start.adblock.agent
          "2":
            patterns:
              - include: "#adblockData"
              - match: ";"
                name: punctuation.separator
              - name: invalid.illegal
                match: ".*"
          "3":
            name: punctuation.definition.array.end.adblock.agent
  adblockData:
    patterns:
      - match: |-
          (?x)
            (?:\s*)
            (
                [Aa]d[Bb]lock(?:\s[Pp]lus)?
                |u[Bb]lock(?:\s[Oo]rigin)?
                |[Aa]d[Gg]uard
            )
            (?:\s+(\d+(?:\.\d+)*+\+?))?
            (?:\s*)
        captures:
          "1":
            name: constant.language.agent.adblocker.name
          "2":
            name: constant.numeric.decimal
  preprocessor:
    patterns:
      - match: "^(!#if)(\\s)(.*)$"
        captures:
          "1":
            name: keyword.preprocessor.directive
          "2":
            name: keyword.other.delimiter.whitespace
          "3":
            patterns:
              # variable names
              - name: constant.language.platform.name
                match: "[A-Za-z]+[\\w_-]*"
              # and (&&) operator
              - name: keyword.operator.logical.and
                match: "&&"
              # or (||) operator
              - name: keyword.operator.logical.or
                match: "\\|\\|"
              # not (!) operator
              - name: keyword.operator.logical.not
                match: "!"
              # open and close parentheses
              - name: keyword.control.characters.parenthesis.open
                match: "\\("
              - name: keyword.control.characters.parenthesis.close
                match: "\\)"
              # space, tab
              - name: keyword.other.delimiter.whitespace
                match: "\\s+"
              # anything else is invalid
              - name: invalid.illegal
                match: ".*"
      - match: "^(!#include) (.*)$"
        captures:
          "1":
            name: keyword.preprocessor.directive
          "2":
            name: string.unquoted
      # TODO: handle leading and trailing whitespace in the beginning, and not for every rule type
      - match: "^(!#else)(\\s*)$"
        captures:
          "1":
            name: keyword.preprocessor.directive
          "2":
            name: keyword.other.delimiter.whitespace
      - match: "^(!#endif)(\\s*)$"
        captures:
          "1":
            name: keyword.preprocessor.directive
          "2":
            name: keyword.other.delimiter.whitespace
      - match: "^(!#safari_cb_affinity)(.*)$"
        captures:
          "1":
            name: keyword.preprocessor.directive
          "2":
            patterns:
              - name: constant.language.contentblocker.name
                match: "(all|general|privacy|social|security|other|custom)"
              - name: keyword.control.characters
                match: "(\\(|\\)|,)"
              - name: invalid.illegal
                match: ".*"
      - match: "^(!\\+) (.*)$"
        captures:
          "1":
            name: keyword.preprocessor.hint
          "2":
            patterns:
              - name: keyword.control.hint.name
                match: "(NOT_OPTIMIZED|OPTIMIZED|PLATFORM|NOT_PLATFORM)"
              - name: constant.language.platform.name
                match: "(windows|mac|android|ios|ext_chromium|ext_ff|ext_edge|ext_opera|ext_ublock|ext_safari|ext_android_cb)"
              - name: keyword.control.characters
                match: "(\\(|\\)|,)"
      - match: "^!#(?!#).+$"
        name: invalid.illegal.preprocessor
  comments:
    patterns:
      - name: comment.line.exclamation-sign
        match: "^!.*"
      - name: comment.line.hashtag-sign
        # It's important to distinguish between hashmark based comments and general cosmetic rules, so we need to
        # exclude valid cosmetic rule separators from the match. This way, for example ##.foo will not be incorrectly
        # marked as a comment.
        # TODO: If a new cosmetic rule separator is added, it should be added here too
        match: "^#(?!(?:@?(?:\\$?\\?|\\$|%)?#)).*"
  elemhideRules:
    patterns:
      - match: "^(\\[.+?\\])?(.*?)(#@?\\??#\\^?)(.+)$"
        captures:
          "1":
            patterns:
              - include: "#cosmeticRulesOptions"
          "2":
            patterns:
              - include: "#domainListCommaSeparated"
          "3":
            name: keyword.control.adblock
          "4":
            patterns:
              - include: "#cssSelector"
  snippetRulesABP:
    patterns:
      - match: "^(.*?)(#@?\\$#)([^{]+)$"
        captures:
          "1":
            patterns:
              - include: "#domainListCommaSeparated"
          "2":
            name: keyword.control.adblock
          "3":
            name: constant.character.snippet.adblock
  cssRules:
    patterns:
      - match: "^(\\[.+?\\])?(.*?)(#@?\\$\\??#)(.+)$"
        captures:
          "1":
            patterns:
              - include: "#cosmeticRulesOptions"
          "2":
            patterns:
              - include: "#domainListCommaSeparated"
          "3":
            name: keyword.control.adblock
          "4":
            patterns:
              - include: "#cssStyle"
  contentRules:
    patterns:
      - match: "^(\\[.+?\\])?(.*?)(\\$@?\\$)(.+?)(\\[.+)?$"
        captures:
          "1":
            patterns:
              - include: "#cosmeticRulesOptions"
          "2":
            patterns:
              - include: "#domainListCommaSeparated"
          "3":
            name: keyword.control.adblock
          "4":
            name: entity.name.function.adblock
          "5":
            patterns:
              - include: "#contentAttributes"
  scriptletRules:
    patterns:
      - match: "^(\\[.+?\\])?(.*?)(#@?%#)(\\/\\/scriptlet)(\\()(.+)(\\)\\s*)$"
        captures:
          "1":
            patterns:
              - include: "#cosmeticRulesOptions"
          "2":
            patterns:
              - include: "#domainListCommaSeparated"
          "3":
            name: keyword.control.adblock
          "4":
            name: entity.name.function.adblock
          "5":
            name: punctuation.section.adblock
          "6":
            patterns:
              - include: "#scriptletFunction"
          "7":
            name: punctuation.section.adblock
  scriptletRulesUBO:
    patterns:
      - match: "^(.*?)(#@?#)(\\+js)(\\()(.+)(\\)\\s*)$"
        captures:
          "1":
            patterns:
              - include: "#domainListCommaSeparated"
          "2":
            name: keyword.control.adblock
          "3":
            name: entity.name.function.adblock
          "4":
            name: punctuation.section.adblock
          "5":
            patterns:
              - include: "#scriptletFunctionUBO"
          "6":
            name: punctuation.section.adblock
  jsRules:
    # In this case, we embed the JS grammar in the adblock grammar
    # by using the include: "source.js" scope.
    # This is an external grammar, so it should be installed separately,
    # but both VSCode and GitHub Linguist will recognize it.
    # See https://github.com/github-linguist/linguist/discussions/6020#discussioncomment-3397226
    patterns:
      # Do not confuse with #%#//scriptlet, so we use a negative lookahead
      # to make sure the separator is not followed by //scriptlet
      - begin: "^(.*?)(#@?%#(?!\\/\\/scriptlet))"
        beginCaptures:
          "1":
            patterns:
              - include: "#domainListCommaSeparated"
          "2":
            name: keyword.control.adblock
        end: "$"
        contentName: source.js
        patterns:
          - include: source.js
      # Mark any other JS inject as invalid, typically unclosed / invalid
      # scriptlet calls
      - match: "^(.*?)(#@?%#)(.+)$"
        captures:
          "1":
            patterns:
              - include: "#domainListCommaSeparated"
          "2":
            name: keyword.control.adblock
          "3":
            name: invalid.illegal
  basicRulesNoUrl:
    patterns:
      - match: "^(\\$)(.+)$"
        captures:
          "1":
            name: keyword.control.adblock
          "2":
            patterns:
              - include: "#basicRulesOptions"
  basicRulesRegex:
    patterns:
      - match: "^(\\/[^\\/\\\\]*(?:\\\\.[^\\/\\\\]*)*\\/[dgimsuy]*)(?:(\\$)(.+))?$"
        captures:
          "1":
            patterns:
              - include: "#regularExpression"
          "2":
            name: keyword.control.adblock
          "3":
            patterns:
              - include: "#basicRulesOptions"
  basicRules:
    patterns:
      - match: "^(.+?)((\\$(?!\\/))(.*))?$"
        captures:
          "1":
            patterns:
              - include: "#urlPattern"
          "3":
            name: keyword.control.adblock
          "4":
            patterns:
              - include: "#basicRulesOptions"
  regularExpression:
    patterns:
      - begin: "(/)"
        beginCaptures:
          "1":
            name: keyword.other.regex.begin
        end: "((?<!\\\\)/)([dgimsuy]*)?"
        endCaptures:
          "1":
            name: keyword.other.regex.end
          "2":
            name: keyword.other.regex
        contentName: string.regexp
        patterns:
          - match: "(?<!\\\\)([/\\^\\$\\|])"
            name: keyword.control.regex
  urlPattern:
    patterns:
      - name: string.regexp.adblock
        match: "^(@@)?(\\/)(.+)\\/$"
        captures:
          "1":
            name: keyword.other.adblock
      - match: "^@@\\|?\\|?"
        name: keyword.other.adblock
      - match: "^\\|\\|"
        name: keyword.other.adblock
      - match: "^\\|"
        name: keyword.other.adblock
      - match: "\\|$"
        name: keyword.other.adblock
      - match: "\\^"
        name: keyword.other.adblock
      - match: "\\*"
        name: keyword.other.adblock
  basicRulesOptions:
    patterns:
      - match: replace=((\/)(((\\\/)|[^,/]|(\\,))+?)(\/)(((\\\/)|[^,/]|(\\,))*?)(\/)([a-z]*))
        name: keyword.other.adblock
        captures:
          "1":
            name: string.regexp.adblock
      - match: "(domain|denyallow|from|to)(=)([^,]+)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - include: "#domainListPipeSeparated"
      - match: "(app)(=)([^,]+)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - include: "#appListPipeSeparated"
      - match: "(dnstype)(=)([^,]+)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - include: "#dnsTypesPipeSeparated"
      - match: "(client|ctag)(=)(((\\\\,)|[^,])+)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - include: "#dnsClientsPipeSeparated"
      - match: "(redirect|redirect-rule|csp|cookie)(=)?(((\\\\,)|[^,])+)?"
        name: keyword.other.adblock
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            name: string.unquoted.adblock
      - match: "(dnsrewrite)(=)(((\\\\,)|[^,])+)"
        name: keyword.other.adblock
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - name: keyword.other.delimiter
                match: ";"
              - name: string.unquoted.adblock
                match: "[^;]*"
      - match: "(removeheader)(=)?(((\\\\,)|[^,])+)?"
        name: keyword.other.adblock
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - name: keyword.other.delimiter
                match: ":"
              - name: string.unquoted.adblock
                match: "[^:]*"
      - match: "(rewrite)(=)(abp-resource:)([^,]+)"
        name: keyword.other.adblock
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            name: keyword.other.adblock
          "4":
            name: string.unquoted.adblock
      - match: "(removeparam|queryprune)(=)?(~)?(((\\\\,)|[^,])+)?"
        name: keyword.other.adblock
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            name: keyword.other.adblock
          "4":
            name: string.unquoted.adblock
      - match: "(method)(=)([^,]+)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - match: "(?i)(connect|delete|get|head|options|patch|post|put)"
                name: string.unquoted.adblock
              - match: "~|\\|"
                name: keyword.operator.adblock
              - match: ".+"
                name: invalid.illegal.method-value
      - match: "(referrerpolicy)(=)?((\\w|-)+)?"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            patterns:
              - match: "(?i)(no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url)"
                name: string.unquoted.adblock
              - match: "~|\\|.+"
                name: invalid.illegal.referrerpolicy-value
      - match: "(permissions)(=)?(((\\\\,)|[^,])+)?"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            name: string.unquoted.adblock
      - match: "(header)(=)([^,]+)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: keyword.operator.adblock
          "3":
            name: string.unquoted.adblock
      - match: "(inline-script|inline-font|mp4|empty|badfilter|genericblock|generichide|network|popup|popunder|important|replace|stealth)"
        name: keyword.other.adblock
      - match: "(~?)(first-party|third-party|match-case|elemhide|content|jsinject|urlblock|extension|all|strict1p|strict3p|1p|3p|css|frame|ghide|ehide|shide|specifichide)"
        name: keyword.other.adblock
      - match: "(~)?(document|doc|font|image|media|object|other|ping|beacon|script|stylesheet|css|subdocument|frame|websocket|xmlhttprequest|xhr|webrtc)(,|$)"
        name: keyword.other.adblock
      - match: "(~)?(object-subrequest)"
        name: invalid.illegal.removed.modifier
      - match: ","
        name: punctuation.definition.adblock
      - match: "\\$"
        name: invalid.illegal.redundant.modifier.separator
  cosmeticRulesOptions:
    match: "(\\[)(.+?)(\\])"
    captures:
      "1":
        name: keyword.control.adblock
      "2":
        patterns:
          - match: "(path)(=)(((\\\\,)|[^,])+)"
            captures:
              "1":
                name: keyword.other.adblock
              "2":
                name: keyword.operator.adblock
              "3":
                name: string.unquoted.adblock
          - match: "(domain)(=)([^,]+)"
            captures:
              "1":
                name: keyword.other.adblock
              "2":
                name: keyword.operator.adblock
              "3":
                patterns:
                  - include: "#domainListPipeSeparated"
          - match: "(app)(=)([^,]+)"
            captures:
              "1":
                name: keyword.other.adblock
              "2":
                name: keyword.operator.adblock
              "3":
                patterns:
                  - include: "#appListPipeSeparated"
          - match: "(url)(=)([^,]+)"
            captures:
              "1":
                name: keyword.other.adblock
              "2":
                name: keyword.operator.adblock
              "3":
                name: string.unquoted.adblock
          - match: "\\$"
            name: keyword.control.adblock
          - match: ","
            name: punctuation.definition.adblock
          - name: invalid.illegal.adblock
            match: ".*"
      "3":
        name: keyword.control.adblock
  contentAttributes:
    patterns:
      - match: (\[)([^"=]+?)(\=)(".+?")(\])
        captures:
          "1":
            name: punctuation.section.adblock
          "2":
            name: keyword.other.adblock
          "3":
            name: keyword.operator.adblock
          "4":
            name: string.quoted.adblock
          "5":
            name: punctuation.section.adblock
      - name: invalid.illegal.adblock
        match: ".*"
  scriptletFunction:
    patterns:
      - match: ((['|"])(.*?)(?<!\\)(\2))(,\s*)?
        captures:
          "1":
            name: string.quoted.adblock
          "5":
            name: keyword.operator.adblock
      - name: invalid.illegal.adblock
        match: ".*"
  scriptletFunctionUBO:
    patterns:
      - match: "((?:[^\\\\,]+|\\\\.?)*)(,|$)"
        captures:
          "1":
            name: string.quoted.adblock
          "2":
            name: keyword.operator.adblock
      - name: invalid.illegal.adblock
        match: ".*"
  cssStyle:
    patterns:
      - match: "(@media[\\s]+[^\\{]*)(\\{)([\\s]*[^\\{]*)(\\{)([\\s]*[^\\}]*)(\\})[\\s]*(\\})"
        captures:
          "1":
            name: entity.name.function.adblock
          "2":
            name: punctuation.section.adblock
          "3":
            name: entity.name.function.adblock
          "4":
            name: punctuation.section.adblock
          "5":
            name: string.quoted.adblock
          "6":
            name: punctuation.section.adblock
          "7":
            name: punctuation.section.adblock
      - match: "([^{}]+)\\s*((\\{)(.+?)(\\}))"
        captures:
          "1":
            name: entity.name.function.adblock
          "3":
            name: punctuation.section.adblock
          "4":
            name: string.quoted.adblock
          "5":
            name: punctuation.section.adblock
      - name: invalid.illegal.adblock
        match: ".*"
  cssSelector:
    patterns:
      - name: entity.name.function.adblock
        match: ".+"
  domainListCommaSeparated:
    patterns:
      - match: "(~?)([^,]+)(,?)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: string.unquoted.adblock
          "3":
            name: punctuation.definition.adblock
      - name: invalid.illegal.domain-list
        match: ".*"
  domainListPipeSeparated:
    patterns:
      - match: "(~?)([^|]+)(\\|?)"
        captures:
          "1":
            name: keyword.other.adblock
          "2":
            name: string.unquoted.adblock
          "3":
            name: punctuation.definition.adblock
      - name: invalid.illegal.domain-list
        match: ".*"
  appListPipeSeparated:
    patterns:
      - match: "((~?)([a-zA-Z0-9.-_]+)(\\|?))"
        captures:
          "2":
            name: keyword.other.adblock
          "3":
            name: string.unquoted.adblock
          "4":
            name: punctuation.definition.adblock
      - name: invalid.illegal.app-list
        match: ".*"
  dnsTypesPipeSeparated:
    patterns:
      - match: "((~?)([a-zA-Z0-9.-_]+)(\\|?))"
        captures:
          "2":
            name: keyword.other.adblock
          "3":
            name: string.unquoted.adblock
          "4":
            name: punctuation.definition.adblock
      - name: invalid.illegal.app-list
        match: ".*"
  dnsClientsPipeSeparated:
    patterns:
      - match: "((~?)([^|]+)(\\|?))"
        captures:
          "2":
            name: keyword.other.adblock
          "3":
            name: string.unquoted.adblock
          "4":
            name: punctuation.definition.adblock
      - name: invalid.illegal.app-list
        match: ".*"
